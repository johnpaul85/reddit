{"version":3,"sources":["utils/shortenNumber.js","components/Card/Card.jsx","features/Avatar/Avatar.jsx","features/Comment/Comment.jsx","features/Post/Post.jsx","utils/getRandomNumber.js","features/Post/PostLoading.jsx","api/reddit.js","store/redditSlice.js","features/Home/Home.jsx","features/Header/Header.jsx","store/subRedditSlice.js","features/Subreddits/Subreddits.jsx","App.jsx","store/index.js","index.jsx"],"names":["shortenNumber","num","digits","units","i","length","decimal","toFixed","Card","props","className","children","Avatar","name","src","alt","Comment","comment","author","moment","unix","created_utc","fromNow","source","body","Post","useState","voteValue","setVoteValue","post","onToggleComments","onHandleVote","newValue","key","id","type","onClick","aria-label","ups","title","url","showingComments","permalink","num_comments","errorComments","loadingComments","comments","map","min","max","Math","floor","random","PostLoading","width","getRandomNumber","height","API_ROOT","getSubredditPosts","subreddit","a","fetch","response","json","data","getSubreddits","getPostComments","redditSlice","createSlice","initialState","posts","error","isLoading","searchTerm","selectedSubreddit","reducers","setPosts","state","action","payload","startGetPosts","getPostsSuccess","getPostsFailed","setSearchTerm","setSelectedSubreddit","toggleShowingComments","startGetComments","getCommentsSuccess","index","getCommentsFailed","actions","fetchPosts","dispatch","postsWithMetadata","selectSelectedSubreddit","reddit","selectFilteredPosts","createSelector","filter","toLowerCase","includes","Home","useSelector","useDispatch","useEffect","fetchComments","animation","Array","fill","Header","searchTermLocal","setSearchTermLocal","onSearchTermSubmit","e","preventDefault","onSubmit","placeholder","value","onChange","target","subRedditSlice","subreddits","startGetSubreddits","getSubredditsSuccess","getSubredditsFailed","selectSubreddits","Subreddits","icon_img","display_name","style","border","primary_color","App","configureStore","reducer","combineReducers","redditReducer","subRedditReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.ae5f2a58.chunk.js","sourcesContent":["/**\n * Shorten number to thousands, millions, billions, etc.\n * Source: https://stackoverflow.com/questions/9461621/format-a-number-as-2-5k-if-a-thousand-or-more-otherwise-900\n * @param {number} num Number to shorten\n * @param {number} digits The number of digits to appear after the decimal point.\n */\nconst shortenNumber = (num, digits) => {\n  const units = ['k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'];\n\n  for (let i = units.length - 1; i >= 0; i -= 1) {\n    const decimal = 1000 ** (i + 1);\n\n    if (num <= -decimal || num >= decimal) {\n      return +(num / decimal).toFixed(digits) + units[i];\n    }\n  }\n\n  return num;\n};\n\nexport default shortenNumber;\n","import React from 'react';\nimport './Card.css';\n\nconst Card = (props) => {\n  return <div className={`card ${props.className}`}>{props.children}</div>;\n};\n\nexport default Card;\n","import React from 'react';\nimport './Avatar.css';\n\nconst Avatar = (props) => {\n  const { name } = props;\n\n  return (\n    <img\n      src={`https://api.adorable.io/avatars/10/${name}`}\n      alt={`${name} profile`}\n      className=\"avatar-profile-image\"\n    />\n  );\n};\n\nexport default Avatar;\n","import React from 'react';\nimport moment from 'moment'; // npm i react-moment\nimport ReactMarkdown from 'react-markdown';\nimport './Comment.css';\nimport Avatar from '../Avatar/Avatar';\n\nconst Comment = (props) => {\n  const { comment } = props;\n  return (\n    <div className=\"comment\">\n      <div className=\"comment-metadata\">\n        <Avatar name={comment.author} />\n        <p className=\"comment-author\">{comment.author}</p>\n        <p className=\"comment-created-time\">\n          {moment.unix(comment.created_utc).fromNow()}\n        </p>\n      </div>\n      <ReactMarkdown source={comment.body} />\n    </div>\n  );\n};\n\nexport default Comment;\n","import React, { useState } from 'react';\nimport Skeleton from 'react-loading-skeleton';\nimport './Post.css';\nimport {\n  TiArrowUpOutline,\n  TiArrowUpThick,\n  TiArrowDownOutline,\n  TiArrowDownThick,\n  TiMessage,\n} from 'react-icons/ti';\nimport moment from 'moment';\nimport shortenNumber from '../../utils/shortenNumber';\nimport Card from '../../components/Card/Card';\nimport Comment from '../Comment/Comment';\nimport Avatar from '../Avatar/Avatar';\n\nconst Post = (props) => {\n  const [voteValue, setVoteValue] = useState(0);\n\n  const { post, onToggleComments } = props;\n\n  /**\n   * @param {number} newValue The new vote value\n   */\n  const onHandleVote = (newValue) => {\n    if (newValue === voteValue) {\n      setVoteValue(0);\n    } else if (newValue === 1) {\n      setVoteValue(1);\n    } else {\n      setVoteValue(-1);\n    }\n  };\n\n  const renderUpVote = () => {\n    if (voteValue === 1) {\n      return <TiArrowUpThick className=\"icon-action\" />;\n    }\n    return <TiArrowUpOutline className=\"icon-action\" />;\n  };\n\n  const renderDownVote = () => {\n    if (voteValue === -1) {\n      return <TiArrowDownThick className=\"icon-action\" />;\n    }\n    return <TiArrowDownOutline className=\"icon-action\" />;\n  };\n\n  const getVoteType = () => {\n    if (voteValue === 1) {\n      return 'up-vote';\n    }\n    if (voteValue === -1) {\n      return 'down-vote';\n    }\n\n    return '';\n  };\n\n  const renderComments = () => {\n    if (post.errorComments) {\n      return (\n        <div>\n          <h3>Error loading comments</h3>\n        </div>\n      );\n    }\n\n    if (post.loadingComments) {\n      return (\n        <div>\n          <Skeleton />\n          <Skeleton />\n          <Skeleton />\n          <Skeleton />\n        </div>\n      );\n    }\n\n    if (post.showingComments) {\n      return (\n        <div>\n          {post.comments.map((comment) => (\n            <Comment comment={comment} key={comment.id} />\n          ))}\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  return (\n    <article key={post.id}>\n      <Card>\n        <div className=\"post-wrapper\">\n          <div className=\"post-votes-container\">\n            <button\n              type=\"button\"\n              className={`icon-action-button up-vote ${\n                voteValue === 1 && 'active'\n              }`}\n              onClick={() => onHandleVote(1)}\n              aria-label=\"Up vote\"\n            >\n              {renderUpVote()}\n            </button>\n            <p className={`post-votes-value ${getVoteType()}`}>\n              {shortenNumber(post.ups, 1)}\n            </p>\n            <button\n              type=\"button\"\n              className={`icon-action-button down-vote ${\n                voteValue === -1 && 'active'\n              }`}\n              onClick={() => onHandleVote(-1)}\n              aria-label=\"Down vote\"\n            >\n              {renderDownVote()}\n            </button>\n          </div>\n          <div className=\"post-container\">\n            <h3 className=\"post-title\">{post.title}</h3>\n\n            <div className=\"post-image-container\">\n              <img src={post.url} alt=\"\" className=\"post-image\" />\n            </div>\n\n            <div className=\"post-details\">\n              <span className=\"author-details\">\n                <Avatar name={post.author} />\n                <span className=\"author-username\">{post.author}</span>\n              </span>\n              <span>{moment.unix(post.created_utc).fromNow()}</span>\n              <span className=\"post-comments-container\">\n                <button\n                  type=\"button\"\n                  className={`icon-action-button ${\n                    post.showingComments && 'showing-comments'\n                  }`}\n                  onClick={() => onToggleComments(post.permalink)}\n                  aria-label=\"Show comments\"\n                >\n                  <TiMessage className=\"icon-action\" />\n                </button>\n                {shortenNumber(post.num_comments, 1)}\n              </span>\n            </div>\n\n            {renderComments()}\n          </div>\n        </div>\n      </Card>\n    </article>\n  );\n};\n\nexport default Post;\n","/**\n * Generates a number between min and max.\n * @param {number} min\n * @param {number} max\n */\nexport default (min, max) => {\n  return Math.floor(Math.random() * max) + min;\n};\n","import React from 'react';\nimport Skeleton from 'react-loading-skeleton';\nimport './Post.css';\nimport './PostLoading.css';\nimport {\n  TiArrowUpOutline,\n  TiArrowDownOutline,\n  TiMessage,\n} from 'react-icons/ti';\nimport getRandomNumber from '../../utils/getRandomNumber';\n\nconst PostLoading = () => {\n  return (\n    <article className=\"post\">\n      <div className=\"post-votes-container\">\n        <button\n          type=\"button\"\n          className=\"icon-action-button up-vote\"\n          aria-label=\"Up vote\"\n        >\n          <TiArrowUpOutline className=\"icon-action\" />\n        </button>\n        <Skeleton className=\"post-votes-value post-votes-value-loading\" />\n        <button\n          type=\"button\"\n          className=\"icon-action-button down-vote\"\n          aria-label=\"Down vote\"\n        >\n          <TiArrowDownOutline className=\"icon-action\" />\n        </button>\n      </div>\n      <div className=\"post-container\">\n        <h3 className=\"post-title\">\n          <Skeleton width={getRandomNumber(100, 200)} />\n        </h3>\n\n        <div className=\"post-image-container\">\n          <Skeleton height={250} />\n        </div>\n\n        <div className=\"post-details\">\n          <span>\n            <Skeleton width={getRandomNumber(20, 50)} />\n          </span>\n          <span>\n            <Skeleton width={getRandomNumber(50, 100)} />\n          </span>\n          <span className=\"post-comments-container\">\n            <button\n              type=\"button\"\n              className=\"icon-action-button\"\n              aria-label=\"Show comments\"\n            >\n              <TiMessage className=\"icon-action\" />\n            </button>\n            <Skeleton width={getRandomNumber(10, 50)} />\n          </span>\n        </div>\n      </div>\n    </article>\n  );\n};\n\nexport default PostLoading;\n","export const API_ROOT = 'https://www.reddit.com';\n\nexport const getSubredditPosts = async (subreddit) => {\n  const response = await fetch(`${API_ROOT}${subreddit}.json`);\n  const json = await response.json();\n\n  return json.data.children.map((post) => post.data);\n};\n\nexport const getSubreddits = async () => {\n  const response = await fetch(`${API_ROOT}/subreddits.json`);\n  const json = await response.json();\n\n  return json.data.children.map((subreddit) => subreddit.data);\n};\n\nexport const getPostComments = async (permalink) => {\n  const response = await fetch(`${API_ROOT}${permalink}.json`);\n  const json = await response.json();\n\n  return json[1].data.children.map((subreddit) => subreddit.data);\n};\n","import { createSlice, createSelector } from '@reduxjs/toolkit';\nimport { getSubredditPosts, getPostComments } from '../api/reddit';\n\nconst initialState = {\n  posts: [],\n  error: false,\n  isLoading: false,\n  searchTerm: '',\n  selectedSubreddit: '/r/pics/',\n};\n\nconst redditSlice = createSlice({\n  name: 'redditPosts',\n  initialState,\n  reducers: {\n    setPosts(state, action) {\n      state.posts = action.payload;\n    },\n    startGetPosts(state) {\n      state.isLoading = true;\n      state.error = false;\n    },\n    getPostsSuccess(state, action) {\n      state.isLoading = false;\n      state.posts = action.payload;\n    },\n    getPostsFailed(state) {\n      state.isLoading = false;\n      state.error = true;\n    },\n    setSearchTerm(state, action) {\n      state.searchTerm = action.payload;\n    },\n    setSelectedSubreddit(state, action) {\n      state.selectedSubreddit = action.payload;\n      state.searchTerm = '';\n    },\n    toggleShowingComments(state, action) {\n      state.posts[action.payload].showingComments = !state.posts[action.payload]\n        .showingComments;\n    },\n    startGetComments(state, action) {\n      // If we're hiding comment, don't fetch the comments.\n      state.posts[action.payload].showingComments = !state.posts[action.payload]\n        .showingComments;\n      if (!state.posts[action.payload].showingComments) {\n        return;\n      }\n      state.posts[action.payload].loadingComments = true;\n      state.posts[action.payload].error = false;\n    },\n    getCommentsSuccess(state, action) {\n      state.posts[action.payload.index].loadingComments = false;\n      state.posts[action.payload.index].comments = action.payload.comments;\n    },\n    getCommentsFailed(state, action) {\n      state.posts[action.payload].loadingComments = false;\n      state.posts[action.payload].error = true;\n    },\n  },\n});\n\nexport const {\n  setPosts,\n  getPostsFailed,\n  getPostsSuccess,\n  startGetPosts,\n  setSearchTerm,\n  setSelectedSubreddit,\n  toggleShowingComments,\n  getCommentsFailed,\n  getCommentsSuccess,\n  startGetComments,\n} = redditSlice.actions;\n\nexport default redditSlice.reducer;\n\n// This is a Redux Thunk that gets posts from a subreddit.\nexport const fetchPosts = (subreddit) => async (dispatch) => {\n  try {\n    dispatch(startGetPosts());\n    const posts = await getSubredditPosts(subreddit);\n\n    // We are adding showingComments and comments as additional fields to handle showing them when the user wants to. We need to do this because we need to call another API endpoint to get the comments for each post.\n    const postsWithMetadata = posts.map((post) => ({\n      ...post,\n      showingComments: false,\n      comments: [],\n      loadingComments: false,\n      errorComments: false,\n    }));\n    dispatch(getPostsSuccess(postsWithMetadata));\n  } catch (error) {\n    dispatch(getPostsFailed());\n  }\n};\n\nexport const fetchComments = (index, permalink) => async (dispatch) => {\n  try {\n    dispatch(startGetComments(index));\n    const comments = await getPostComments(permalink);\n    dispatch(getCommentsSuccess({ index, comments }));\n  } catch (error) {\n    dispatch(getCommentsFailed(index));\n  }\n};\n\nconst selectPosts = (state) => state.reddit.posts;\nconst selectSearchTerm = (state) => state.reddit.searchTerm;\nexport const selectSelectedSubreddit = (state) =>\n  state.reddit.selectedSubreddit;\n\nexport const selectFilteredPosts = createSelector(\n  [selectPosts, selectSearchTerm],\n  (posts, searchTerm) => {\n    if (searchTerm !== '') {\n      return posts.filter((post) =>\n        post.title.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n    }\n\n    return posts;\n  }\n);\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AnimatedList } from 'react-animated-list';\nimport Post from '../Post/Post';\nimport PostLoading from '../Post/PostLoading';\nimport getRandomNumber from '../../utils/getRandomNumber';\nimport {\n  fetchPosts,\n  selectFilteredPosts,\n  setSearchTerm,\n  fetchComments,\n} from '../../store/redditSlice';\nimport './Home.css';\n\nconst Home = () => {\n  const reddit = useSelector((state) => state.reddit);\n  const { isLoading, error, searchTerm, selectedSubreddit } = reddit;\n  const posts = useSelector(selectFilteredPosts);\n  const dispatch = useDispatch();\n  \n  useEffect(() => {\n    dispatch(fetchPosts(selectedSubreddit));\n    // eslint-disable-next-line\n  }, [selectedSubreddit]);\n\n  const onToggleComments = (index) => {\n    const getComments = (permalink) => {\n      dispatch(fetchComments(index, permalink));\n    };\n\n    return getComments;\n  };\n\n  if (isLoading) {\n    return (\n      <AnimatedList animation=\"zoom\">\n        {Array(getRandomNumber(3, 10)).fill(<PostLoading />)}\n      </AnimatedList>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"error\">\n        <h2>Failed to load posts.</h2>\n        <button\n          type=\"button\"\n          onClick={() => dispatch(fetchPosts(selectedSubreddit))}\n        >\n          Try again\n        </button>\n      </div>\n    );\n  }\n\n  if (posts.length === 0) {\n    return (\n      <div className=\"error\">\n        <h2>No posts matching \"{searchTerm}\"</h2>\n        <button type=\"button\" onClick={() => dispatch(setSearchTerm(''))}>\n          Go home\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      {posts.map((post, index) => (\n        <Post\n          key={post.id}\n          post={post}\n          onToggleComments={onToggleComments(index)}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default Home;\n","import React, { useState, useEffect } from 'react';\nimport { HiOutlineSearch } from 'react-icons/hi';\nimport './Header.css';\nimport { FaReddit } from 'react-icons/fa';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setSearchTerm } from '../../store/redditSlice';\n\nconst Header = () => {\n  const [searchTermLocal, setSearchTermLocal] = useState('');\n  const searchTerm = useSelector((state) => state.reddit.searchTerm);\n  const dispatch = useDispatch();\n\n  const onSearchTermChange = (e) => {\n    setSearchTermLocal(e.target.value);\n  };\n\n  useEffect(() => {\n    setSearchTermLocal(searchTerm);\n  }, [searchTerm]);\n\n  const onSearchTermSubmit = (e) => {\n    e.preventDefault();\n    dispatch(setSearchTerm(searchTermLocal));\n  };\n\n  return (\n    <header>\n      <div className=\"logo\">\n        <FaReddit className=\"logo-icon\" />\n        <p>\n          Reddit<span>Minimal</span>\n        </p>\n      </div>\n      <form className=\"search\" onSubmit={onSearchTermSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Search\"\n          value={searchTermLocal}\n          onChange={onSearchTermChange}\n          aria-label=\"Search posts\"\n        />\n        <button type=\"submit\" onClick={onSearchTermSubmit} aria-label=\"Search\">\n          <HiOutlineSearch />\n        </button>\n      </form>\n    </header>\n  );\n};\n\nexport default Header;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { getSubreddits } from '../api/reddit';\n\nconst initialState = {\n  subreddits: [],\n  error: false,\n  isLoading: false,\n};\n\nconst subRedditSlice = createSlice({\n  name: 'subreddits',\n  initialState,\n  reducers: {\n    startGetSubreddits(state) {\n      state.isLoading = true;\n      state.error = false;\n    },\n    getSubredditsSuccess(state, action) {\n      state.isLoading = false;\n      state.subreddits = action.payload;\n    },\n    getSubredditsFailed(state) {\n      state.isLoading = false;\n      state.error = true;\n    },\n  },\n});\n\nexport const {\n  getSubredditsFailed,\n  getSubredditsSuccess,\n  startGetSubreddits,\n} = subRedditSlice.actions;\n\nexport default subRedditSlice.reducer;\n\n// This is a Redux Thunk that gets subreddits.\nexport const fetchSubreddits = () => async (dispatch) => {\n  try {\n    dispatch(startGetSubreddits());\n    const subreddits = await getSubreddits();\n    dispatch(getSubredditsSuccess(subreddits));\n  } catch (error) {\n    dispatch(getSubredditsFailed());\n  }\n};\n\nexport const selectSubreddits = (state) => state.subreddits.subreddits;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Card from '../../components/Card/Card';\nimport { fetchSubreddits, selectSubreddits } from '../../store/subRedditSlice';\nimport './Subreddits.css';\nimport {\n  setSelectedSubreddit,\n  selectSelectedSubreddit,\n} from '../../store/redditSlice';\n\nconst Subreddits = () => {\n  const dispatch = useDispatch();\n  const subreddits = useSelector(selectSubreddits);\n  const selectedSubreddit = useSelector(selectSelectedSubreddit);\n\n  useEffect(() => {\n    dispatch(fetchSubreddits());\n  }, [dispatch]);\n\n  return (\n    <Card className=\"subreddit-card\">\n      <h2>Subreddits</h2>\n      <ul className=\"subreddits-list\">\n        {subreddits.map((subreddit) => (\n          <li\n            key={subreddit.id}\n            className={`${\n              selectedSubreddit === subreddit.url && `selected-subreddit`\n            }`}\n          >\n            <button\n              type=\"button\"\n              onClick={() => dispatch(setSelectedSubreddit(subreddit.url))}\n            >\n              <img\n                src={\n                  subreddit.icon_img ||\n                  `https://api.adorable.io/avatars/25/${subreddit.display_name}`\n                }\n                alt={`${subreddit.display_name}`}\n                className=\"subreddit-icon\"\n                style={{ border: `3px solid ${subreddit.primary_color}` }}\n              />\n              {subreddit.display_name}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </Card>\n  );\n};\n\nexport default Subreddits;\n","import React from 'react';\nimport './App.css';\nimport Home from './features/Home/Home';\nimport Header from './features/Header/Header';\nimport Subreddits from './features/Subreddits/Subreddits';\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <main>\n        <Home />\n      </main>\n      <aside>\n        <Subreddits />\n      </aside>\n    </>\n  );\n}\n\nexport default App;\n","import { configureStore, combineReducers } from '@reduxjs/toolkit';\nimport redditReducer from './redditSlice';\nimport subRedditReducer from './subRedditSlice';\n\nexport default configureStore({\n  reducer: combineReducers({\n    reddit: redditReducer,\n    subreddits: subRedditReducer,\n  }),\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}